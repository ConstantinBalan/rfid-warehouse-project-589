==============================
UWB-RFID WAREHOUSE SIMULATION
SETUP AND USAGE GUIDE
==============================

This document provides comprehensive instructions for setting up and running the UWB-RFID 
warehouse simulation system.

-------------------------------
1. INFRASTRUCTURE SETUP
-------------------------------

Required Components:
- Python Environment: Local development environment with Python 3.8+
- InfluxDB: Time-series database for storing simulation data
- Grafana: Visualization platform with geomap capability
- MQTT Broker (optional for future sprints): For simulating real-time IoT communications

Basic Setup Steps:

1.1. Install Python Dependencies:
   
   cd "/Users/constantinbalan/Desktop/rfid-warehouse-project-589/Sensor Project"
   pip install -r code/simulation/requirements.txt

1.2. Set up InfluxDB (local installation or Docker):
   
   # Docker approach (recommended)
   docker run -d --name influxdb \
     -p 8086:8086 \
     -v influxdb-storage:/var/lib/influxdb2 \
     -e DOCKER_INFLUXDB_INIT_MODE=setup \
     -e DOCKER_INFLUXDB_INIT_USERNAME=admin \
     -e DOCKER_INFLUXDB_INIT_PASSWORD=password123 \
     -e DOCKER_INFLUXDB_INIT_ORG=warehouse \
     -e DOCKER_INFLUXDB_INIT_BUCKET=warehouse_simulation \
     -e DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-token \
     influxdb:2.0

1.3. Set up Grafana (local installation or Docker):
   
   # Docker approach
   docker run -d --name grafana \
     -p 3000:3000 \
     -v grafana-storage:/var/lib/grafana \
     grafana/grafana

-------------------------------
2. CREATING THE MAIN SIMULATION SCRIPT
-------------------------------

Create a new file `main.py` in your simulation directory with this content:

"""
Main simulation script for UWB-RFID Indoor Positioning System.
"""

import time
import numpy as np
import matplotlib.pyplot as plt
from simulation.warehouse_model import WarehouseModel
from simulation.virtual_pallet import VirtualPallet
from simulation.uwb_sensor_model import UWBSensorNetwork
from simulation.rfid_reader_model import RFIDReader, RFIDTag
from simulation.movement_patterns import create_movement_pattern
from simulation.visualization.data_exporter import InfluxDBExporter

# InfluxDB configuration
INFLUXDB_URL = "http://localhost:8086"
INFLUXDB_TOKEN = "my-super-secret-token"  # Use the token you created
INFLUXDB_ORG = "warehouse"
INFLUXDB_BUCKET = "warehouse_simulation"

def main():
    # 1. Create and set up warehouse
    warehouse = WarehouseModel(
        width=50.0,  # meters
        length=30.0,  # meters
        height=10.0,  # meters
        name="Demo Warehouse"
    )
    
    # Set GPS reference for geomap visualization
    # Use your actual warehouse location or any reference point
    warehouse.set_gps_reference(lat=40.7128, lon=-74.0060)  # NYC as example
    
    # 2. Add obstacles (shelves, walls, etc.)
    # Add perimeter walls
    wall_height = 4.0
    # North wall
    warehouse.add_obstacle((0, 0, 0), (50.0, 0.3, wall_height), "wall", "north_wall")
    # East wall
    warehouse.add_obstacle((49.7, 0, 0), (0.3, 30.0, wall_height), "wall", "east_wall")
    # South wall
    warehouse.add_obstacle((0, 29.7, 0), (50.0, 0.3, wall_height), "wall", "south_wall")
    # West wall
    warehouse.add_obstacle((0, 0, 0), (0.3, 30.0, wall_height), "wall", "west_wall")
    
    # Add storage shelves
    shelf_height = 3.0
    for i in range(3):
        # Add row of shelves
        x_position = 10 + i * 15
        warehouse.add_obstacle(
            (x_position, 5.0, 0), 
            (1.0, 20.0, shelf_height), 
            "shelf", 
            f"shelf_row_{i+1}"
        )
    
    # 3. Set up UWB sensor network
    uwb_network = UWBSensorNetwork.create_grid_layout(
        width=warehouse.width,
        length=warehouse.length,
        height=warehouse.height,
        grid_size=15.0,  # Sensor spacing
        z_height=3.5,    # Height of sensors
        sensor_properties={
            "range_noise_std": 0.1,
            "max_range": 30.0,
            "detection_probability": 0.98,
            "update_rate": 10.0
        }
    )
    
    # 4. Set up RFID readers
    rfid_readers = []
    # Add readers at strategic locations
    reader_positions = [
        (5.0, 5.0, 3.0),
        (5.0, 25.0, 3.0),
        (25.0, 5.0, 3.0),
        (25.0, 25.0, 3.0),
        (45.0, 15.0, 3.0)
    ]
    
    for i, pos in enumerate(reader_positions):
        reader = RFIDReader(
            reader_id=f"reader_{i+1}",
            position=pos,
            read_range=8.0,
            update_rate=2.0
        )
        rfid_readers.append(reader)
    
    # 5. Create virtual pallets with tags
    pallets = []
    # Create a few pallets at different locations
    pallet_data = [
        {"position": (5, 10, 0.2), "content_type": "electronics"},
        {"position": (20, 15, 0.2), "content_type": "food"},
        {"position": (35, 20, 0.2), "content_type": "clothing"}
    ]
    
    for i, data in enumerate(pallet_data):
        # Create pallet
        pallet = VirtualPallet(
            pallet_id=f"pallet_{i+1}",
            position=data["position"],
            content_type=data["content_type"],
            weight=np.random.uniform(50, 500)  # Random weight between 50-500 kg
        )
        
        # Attach RFID and UWB tags
        pallet.attach_tag(f"rfid_tag_{i+1}")
        pallet.attach_tag(f"uwb_tag_{i+1}")
        
        pallets.append(pallet)
    
    # 6. Set up data exporter
    exporter = InfluxDBExporter(
        url=INFLUXDB_URL,
        token=INFLUXDB_TOKEN,
        org=INFLUXDB_ORG,
        bucket=INFLUXDB_BUCKET
    )
    
    # Export warehouse layout (creates/resets the bucket)
    exporter.export_warehouse_layout(warehouse, reset_bucket=True)
    
    # Export sensor locations
    exporter.export_sensors(uwb_network, warehouse)
    exporter.export_rfid_readers(rfid_readers, warehouse)
    
    # 7. Run simulation
    print("Starting simulation...")
    
    # Create movement patterns for pallets
    movement_patterns = []
    for i, pallet in enumerate(pallets):
        if i == 0:
            # Create a pickup-dropoff pattern
            pattern_type = "path"
            pattern_args = {
                "waypoints": [
                    pallet.position,
                    (15, 10, 0.2),
                    (15, 20, 0.2),
                    (40, 20, 0.2)
                ]
            }
        elif i == 1:
            # Create a random movement pattern
            pattern_type = "random"
            pattern_args = {
                "area_min": (5, 5, 0.2),
                "area_max": (45, 25, 0.2),
                "randomness": 0.7,
                "avoid_obstacles": True
            }
        else:
            # Create a linear movement
            pattern_type = "linear"
            pattern_args = {}
        
        # Create the pattern
        pattern = create_movement_pattern(
            pattern_type=pattern_type,
            warehouse_model=warehouse,
            **pattern_args
        )
        
        movement_patterns.append((pallet, pattern))
    
    # Run simulation for 60 seconds
    simulation_duration = 60  # seconds
    start_time = time.time()
    time_step = 0.1  # seconds
    
    try:
        while time.time() - start_time < simulation_duration:
            current_time = time.time()
            elapsed = current_time - start_time
            
            # Update pallet positions based on movement patterns
            for i, (pallet, pattern) in enumerate(movement_patterns):
                if pattern_type == "linear":
                    # For linear movement, we need start and end positions
                    if i == 2:  # this is our linear movement pallet
                        # Use current position as start
                        start_pos = pallet.position
                        # Define an end position
                        end_pos = (40, 5, 0.2)
                        
                        # Generate next position
                        for pos, ts in pattern.generate_path(start_pos, end_pos, speed=1.0, time_step=time_step):
                            # We only need the first position
                            pallet.move_to(pos, ts)
                            break
                else:
                    # For other pattern types
                    if hasattr(pattern, 'generate_path'):
                        # Get next position from pattern
                        try:
                            # Use current position as start
                            start_pos = pallet.position
                            
                            for pos, ts in pattern.generate_path(start_pos, speed=1.0, time_step=time_step):
                                # We only need the first position
                                pallet.move_to(pos, ts)
                                break
                        except:
                            # If there's an error, skip this pallet
                            pass
            
            # Simulate UWB measurements for each pallet
            for pallet in pallets:
                for tag_id in pallet.tag_ids:
                    if tag_id.startswith("uwb_tag"):
                        # Measure distances from UWB sensors to tag
                        measurements = uwb_network.measure_distances(pallet.position, current_time)
                        
                        # Export measurements
                        if measurements:
                            exporter.export_uwb_measurements(
                                tag_id=tag_id,
                                measurements=measurements,
                                tag_position=pallet.position,
                                warehouse_model=warehouse,
                                timestamp=current_time
                            )
            
            # Simulate RFID detections
            for reader in rfid_readers:
                for pallet in pallets:
                    for tag_id in pallet.tag_ids:
                        if tag_id.startswith("rfid_tag"):
                            # Create a virtual RFID tag
                            tag = RFIDTag(tag_id=tag_id)
                            
                            # Detect the tag
                            detection = reader.detect_tag(tag, pallet.position, current_time)
                            
                            # Export detection if found
                            if detection:
                                exporter.export_rfid_detection(
                                    reader_id=reader.reader_id,
                                    tag_id=tag_id,
                                    rssi=detection.get("rssi", -70),
                                    tag_position=pallet.position,
                                    warehouse_model=warehouse,
                                    timestamp=current_time
                                )
            
            # Export pallet positions
            exporter.export_pallet_batch(pallets, warehouse)
            
            # Sleep for time_step
            time_to_sleep = time_step - (time.time() - current_time)
            if time_to_sleep > 0:
                time.sleep(time_to_sleep)
            
            # Print progress
            if int(elapsed) % 5 == 0:
                print(f"Simulation running: {int(elapsed)}s / {simulation_duration}s")
    
    except KeyboardInterrupt:
        print("\nSimulation interrupted by user")
    
    finally:
        # Clean up
        exporter.close()
        print("Simulation completed")
        
        # Visualize the warehouse
        warehouse.visualize(show_3d=False, show_obstacles=True)

if __name__ == "__main__":
    main()

-------------------------------
3. RUNNING THE SIMULATION
-------------------------------

3.1. Start Infrastructure:
   - Ensure InfluxDB and Grafana are running
   - Log into Grafana (http://localhost:3000) with default credentials (admin/admin)
   - Add InfluxDB as a data source in Grafana

3.2. Run the Simulation:
   
   cd "/Users/constantinbalan/Desktop/rfid-warehouse-project-589/Sensor Project"
   python -m code.main

3.3. Create Grafana Dashboard:
   - Create a new dashboard in Grafana
   - Add a Geomap panel
   - Configure the data source to use InfluxDB
   - Create queries to visualize:
     - Warehouse boundaries
     - Obstacles
     - Pallet positions (with movement)
     - UWB sensor locations
     - RFID reader locations

-------------------------------
4. GRAFANA QUERY EXAMPLES
-------------------------------

Here are example InfluxQL queries for your Grafana dashboard:

4.1. Warehouse Boundaries:
   
   from(bucket: "warehouse_simulation")
     |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
     |> filter(fn: (r) => r._measurement == "warehouse_boundary")
     |> sort(columns: ["order"])

4.2. Pallet Positions (Last 5 Minutes):
   
   from(bucket: "warehouse_simulation")
     |> range(start: -5m)
     |> filter(fn: (r) => r._measurement == "pallet_position")
     |> last()

4.3. Sensor Locations:
   
   from(bucket: "warehouse_simulation")
     |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
     |> filter(fn: (r) => r._measurement == "uwb_sensor" or r._measurement == "rfid_reader")

-------------------------------
5. ADVANCED FEATURES
-------------------------------

5.1. Real-time Trilateration:
   - Add the trilateration algorithm from Sprint 2 to calculate positions from raw measurements
   - Compare calculated positions with true positions

5.2. Simulation Configuration File:
   - Create a YAML configuration to easily adjust simulation parameters

5.3. Multi-Floor Support:
   - Extend the warehouse model to support multiple floors
   - Visualize 3D movements in Grafana

5.4. Integration with Physical Devices:
   - Use MQTT to enable the simulation to receive data from real sensors
   - Create a hybrid simulation with both virtual and real components

-------------------------------
6. TROUBLESHOOTING
-------------------------------

6.1. InfluxDB Connection Issues: 
   - Verify the token and URL in your code
   - Check if the InfluxDB container is running: docker ps

6.2. Visualization Problems: 
   - Check that your Grafana queries match the measurement names in the code
   - Verify that data is being written to InfluxDB

6.3. Simulation Performance: 
   - Reduce the number of pallets or increase the time step for better performance
   - Monitor CPU and memory usage during simulation

-------------------------------
7. CODE STRUCTURE & DEPENDENCIES
-------------------------------

The simulation is composed of these key modules:

- warehouse_model.py: Defines the physical layout and obstacles
- virtual_pallet.py: Manages pallet movement and tag attachment
- movement_patterns.py: Generates realistic movement paths
- uwb_sensor_model.py: Simulates UWB sensor readings with noise
- rfid_reader_model.py: Simulates RFID detection with signal attenuation
- visualization/data_exporter.py: Exports data to InfluxDB for visualization

Dependencies:
- NumPy: For numerical operations
- Matplotlib: For visualization
- InfluxDB Client: For data export
- Matplotlib: For plotting warehouse layouts

This setup provides a complete simulation environment that you can run locally and 
visualize through Grafana's powerful visualization capabilities. The code is modular 
and extensible, allowing you to implement additional features from your Sprint 2-5 plans.
